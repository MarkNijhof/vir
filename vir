#!/bin/bash

# NOTE: None of this works if you have spaces in your directory paths
# but seriously - who has spaces in their directory paths?
# You deserve to have this go wrong if you have spaces in your directory paths
# (Nah, joking - I'll fix it when somebody complains)

munge_file() {
  local file=$1
  local variable=$2
  local value=$3
  local MATCH="s/\$$variable/$value/g"
  mv $file $(echo $file | sed $MATCH)
}

munge_files() {
  for file in $(find $TARGET_DIR -name "*\$*")
  do
    if [[ -d $file ]]; then
      munge_file $file "app" $APP_NAME
      munge_files
      break
    else
      munge_file $file "app" $APP_NAME
    fi
  done
}

template_files() {
  local app=$1
  local variable=$2
  local value=$3
  local MATCH="s/\$$variable/$APP_NAME/g"
  $(find $TARGET_DIR -type f -exec sed -i $MATCH {} \;)
}

make_bootscript() {
  local SCRIPT=""
  if [[ -f "make_bootscript.sh" ]]; then
    echo "Found local bootscript, using that as an override"
    SCRIPT="./make_bootscript.sh"
  else
    SCRIPT="$SOURCEDIR/make_bootscript.sh"
  fi
  exec $SCRIPT
}

run_app() {
  local SCRIPT=""
  if [[ -f "run.sh" ]]; then
    echo "Found local runscript, using that as an override"
    $(./run.sh $@) # Need to trim args though
  else
    # Parse args
    local rel_dir=apps/$APP_NAME/release-files
    local boot=$APP_NAME
    erl -pa deps/*/ebin deps/*/apps/*/ebin apps/*/ebin -setcookie $COOKIE $KERNEL -boot $boot -config $rel_dir/sys.config -$boot mode $RUN_MODE
  fi
}

build_release() {
  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  echo Updating Release Number
  while read line
  do
      local build_no=`expr $line + 1`
  done < "deployment/build_no"

  while read line
  do
      local major=$line
  done < "deployment/major_ver"

  while read line
  do
      local minor=$line
  done < "deployment/minor_ver"

  echo $build_no > "deployment/build_no"

  local release="v$major.$minor.$build_no-$branch_name"

  if [[ -f "apps/shared/include/version.hrl" ]]; then
    echo "-define(VERSION, \"$release\")." > apps/shared/include/version.hrl
  fi

  echo Building Release $release
  if [[ $DIRTYRELEASE -eq 1 ]]; then
    make -j apps
  else
    make clean-all
    make
  fi
  make rel

  # TODO: Deal with native deps if there are any
  echo Making BoM and updating Git with new release tag
  build_bill_of_materials $release "deployment/bill_of_materials"

  git add deployment/build_no
  git add deployment/bill_of_materials.txt
  git add deployment/bill_of_materials.info

  ls -d apps/*/include | xargs -n 1 git add

  git tag $release
  git commit -m "Automated build number increase: $build_no"
  git push --tags
  git push

  echo Git updated for version $release
  echo Building tars and publishing
  build_tars $release
}

build_bill_of_materials() {
  local release=$1
  local output=$2
  local logtotxt="$(pwd)/$output.txt"
  local logtoinfo="$(pwd)/$output.info"

  echo "BoM for release $release" > $logtotxt
  echo "Built on: $(hostname) by $(id -un)" >> $logtotxt
  echo "Date: $(date)" >> $logtotxt
  echo >> $logtotxt
  echo >> $logtotxt
  echo "Root project: $(git remote -v)" >> $logtotxt
  git log -n 1 >> $logtotxt
  echo >> $logtotxt
  echo -e "base\t$release\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" > $logtoinfo

  local all_deps=$(find deps -mindepth 1 -maxdepth 1 -type d | sort)

  for dep in $all_deps ; do
    pushd $dep > /dev/null
    local this_dep=${dep##*/}
    echo "Git tag for dependency $this_dep" >> $logtotxt
    echo "pulled from $(git remote -v)" >> $logtotxt
    git log -n 1 >> $logtotxt
    echo >> $logtotxt
    echo -e "dep\t$this_dep\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" >> $logtoinfo
    popd > /dev/null
  done
}

build_tars() {
  local git_tag=$1
  local releases_folder="$PWD/releases"

  mkdir -p $releases_folder

  for relx_file in $(find "$PWD/apps" -name "relx.config")
  do
    local app_dir=$(dirname "$relx_file")
    pushd $app_dir > /dev/null
    build_tar $releases_folder $git_tag
    popd
  done
}

build_tar() {
  local releases_folder=$1
  local git_tag=$2

  local app=${PWD##*/}
  local tar_dir="${app}_$git_tag"
  local tar_name="${tar_dir}.tar.gz"
  local autorun_name="$releases_folder/install-${tar_name%.tar.gz}"

  echo Building $app Archive...
  rm -f $tar_name
  mv _rel/$app $tar_dir
  tar cfz $tar_name $tar_dir/  || { echo "Tar failed"; exit 1; }
  mv $tar_dir _rel/$app
  cat $SOURCEDIR/autoextract.sh $tar_name > $autorun_name
  rm $tar_name
  chmod +x $autorun_name
  echo done
}


init() {
  mkdir -p $TARGET_DIR
  if [[ "$(ls -A $TARGET_DIR)" ]]; then
    read -p "Directory is not empty, do you wish to proceed? (y/n)" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 0
    fi
  fi
  echo "initing $APP_NAME with template: $TEMPLATE"
  cp -r $TEMPLATEDIR/$TEMPLATE/* $TARGET_DIR
  munge_files
  template_files $TARGET_DIR  "app" $APP_NAME
  cd $TARGET_DIR
  make
  make_bootscript
}

usage() {
  echo "Usage foo"
  exit 1
}


COMMAND=$1
TEMPLATE=empty
APP_NAME=
TARGET_DIR=$(pwd)
OPTIND=2
SOURCEDIR=$HOME/.vir
TEMPLATEDIR=$SOURCEDIR/templates
RUN_MODE=''
DIRTYRELEASE=0
COOKIE='cookie'
KERNEL='-kernel inet_dist_listen_min 9100 inet_dist_listen_max 9105'

case "$COMMAND" in
  "init")
      while getopts ":t:d:" option; do
        case "$option" in
          t)
            TEMPLATE=$OPTARG
            ;;
          d)
            TARGET_DIR=$OPTARG
            ;;
          ?)
            echo "Error: unknown option -$OPTARG"
            usage "init"
            ;;
        esac
      done
      shift $(($OPTIND - 1))
      APP_NAME=$1
      if [[ -z $APP_NAME ]]; then
        usage "init"
      fi
      init $1
    ;;
  "boot")
    make_bootscript
    ;;
  "run")
    while getopts ":s:dlm:c:k:" option; do
      case "$option" in
        m)
          RUN_MODE=$OPTARG
          ;;
        c)
          COOKIE=$OPTARG
          ;;
        k)
          KERNEL=$OPTARG
          ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage
          exit 1
          ;;
      esac
    done
    shift $(($OPTIND - 1))
    APP_NAME=$1
    run_app
    ;;
  "release")
    while getopts ":d" option; do
      case "$option" in
        d)
          DIRTYRELEASE=1
          ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage
          exit 1
          ;;
      esac
    done
    build_release
    ;;
  *)
    usage
    ;;
esac
